{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "UW Blueprint Starter Code Python API",
    "description": "An API for the Python Backend of Starter Code"
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "PasswordLogin": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "OAuthLogin": {
        "type": "object",
        "required": ["id_token"],
        "properties": {
          "id_token": {
            "type": "string"
          }
        }
      }
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Login user. Supply either both email and password, or an Google OAuth id_token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/PasswordLogin" },
                  { "$ref": "#/components/schemas/OAuthLogin" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns access token in response body and sets refreshToken as an httpOnly cookie",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "first_name": {
                      "type": "string"
                    },
                    "last_name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email", "password", "first_name", "last_name"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns access token in response body and sets refreshToken as an httpOnly cookie",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "first_name": {
                      "type": "string"
                    },
                    "last_name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Auth"
        ],
        "description": "Refresh auth credentials",
        "responses": {
          "200": {
            "description": "Returns access token in response body and sets refreshToken as an httpOnly cookie",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/auth/logout/{userid}": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "tags": [
          "Auth"
        ],
        "description": "Logout as user",
        "responses": {
          "204": {
            "description": "Revokes all of the specified user's refresh tokens"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/auth/resetPassword/{email}": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "description": "Triggers password reset for user with specified email (reset link will be emailed)",
        "responses": {
          "204": {
            "description": "Successfully sent password reset email"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "The user's email"
          }
        ],
        "tags": [
          "User"
        ],
        "description": "Get all users, optionally filter by a user_id or email query parameter to retrieve a single user",
        "responses": {
          "200": {
            "description": "Successfully returned a list of users, or a user filtered by id or email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id, first_name, last_name, email, role"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "first_name": {
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "role": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot query by both user and email"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Invalid request"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "User"
        ],
        "description": "Create new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "first_name, last_name, role, email"
                ],
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "User",
                      "Admin"
                    ]
                  },
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a new user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id, first_name, last_name, email, role"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "first_name": {
                      "type": "string"
                    },
                    "last_name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Invalid request"
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "The user's email"
          }
        ],
        "tags": [
          "User"
        ],
        "description": "Deletes a user by user_id or email, specified through a query parameter",
        "responses": {
          "204": {
            "description": "Succesfully deleted user"
          },
          "400": {
            "description": "Cannot query by both user_id and email, invalid user_id or email, user_id or email is not a string, user_id or email not supplied"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/users/{user_id}": {
      "put": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user ID"
          }
        ],
        "tags": [
          "User"
        ],
        "description": "Update the user with the specified user_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "first_name, last_name, role, email"
                ],
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "User",
                      "Admin"
                    ]
                  },
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id, first_name, last_name, email, role"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "first_name": {
                      "type": "string"
                    },
                    "last_name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Invalid request"
          }
        }
      }
    }
  }
}
